package com.zing.dingding.service.impl;

import java.io.IOException;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.http.NameValuePair;
import org.apache.http.message.BasicNameValuePair;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;

import com.zing.dingding.common.Constants;
import com.zing.dingding.common.DingDingAuth;
import com.zing.dingding.common.NetSuiteAuth;
import com.zing.dingding.common.UserUtil;
import com.zing.dingding.dao.DingDepartmentDao;
import com.zing.dingding.dao.DingUserDao;
import com.zing.dingding.dao.NetsuiteEmployeeDao;
import com.zing.dingding.dao.NetsuitePurchaseApproveDao;
import com.zing.dingding.model.DingDepartmentBean;
import com.zing.dingding.model.DingEmpBean;
import com.zing.dingding.model.NsApprovePurchaseOrderBean;
import com.zing.dingding.model.NsEmpBean;
import com.zing.dingding.service.INsService;
import com.zing.dingding.service.INetSuiteService;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

@Service
@SuppressWarnings("all")
public class INetSuiteServiceImpl implements INetSuiteService {

	@Autowired
	NetsuiteEmployeeDao netSuiteEmpDao;

	@Autowired
	DingUserDao dingUserDao;

	@Autowired
	DingDepartmentDao departmentDao;

	@Autowired
	NetsuitePurchaseApproveDao purchaseDao;
	
	@Autowired
	INsService nsService;

	/**
	 * 从netsuite中获取所有员工，保存在本地，并推送到钉钉
	 */
	@Override
	public String getEmployeeList() {
		Map accountMap = nsService.getAccount();
		String result = "";
		String str = "";
		String access_token = Constants.getAccessToken();
		Boolean flag = false;
		NsEmpBean netsuiteEmployee = new NsEmpBean();
		try {
			//1.从netsuite获取成员
			result = NetSuiteAuth.getAuth(accountMap, UserUtil.EMPLOYEEINFOS, null);
			System.out.println("获取到的员工数据："+result);
			JSONArray resultArray = JSONArray.fromObject(result);
			if (resultArray.size() > 0) {
				for (int i = 0; i < resultArray.size(); i++) {
					JSONObject employeeArray = JSONObject.fromObject(resultArray.get(i));
					netsuiteEmployee.setNsId(employeeArray.getString("id"));
					JSONObject employee = JSONObject.fromObject(employeeArray.get("columns"));
					if (employee.has("birthdate")) {
						netsuiteEmployee.setBirthDate(employee.getString("birthdate").replace("/", "-"));
					}
					if (employee.has("supervisor")) {
						netsuiteEmployee.setSupervisor(employee.getString("supervisor"));
					}
					if (employee.has("department")) {
						netsuiteEmployee.setDepartment(employee.getString("department"));
					}
					if (employee.has("subsidiary")) {
						netsuiteEmployee.setSubsidiary(employee.getString("subsidiary"));
					}
					if (employee.has("entityid")) {
						netsuiteEmployee.setEntityId(employee.getString("entityid"));
					}
					if (employee.has("title")) {
						netsuiteEmployee.setTitle(employee.getString("title"));
					}
					if (employee.has("email")) {
						netsuiteEmployee.setEmail(employee.getString("email"));
					}
					if (employee.has("mobilephone")) {
						netsuiteEmployee.setMobilephone(employee.getString("mobilephone").replace(" ", ""));
					}
					netsuiteEmployee.setLastModifiedDate(employee.getString("lastmodifieddate").replace("/", "-"));
					//2.把获取到的成员数据保存在本地
					netSuiteEmpDao.insertEmployee(netsuiteEmployee);
				//	 if(flag){
					//3.把员工添加到钉钉
					if (employee.has("mobilephone") && employee.get("mobilephone") != "") {
						JSONObject departmentJson = JSONObject.fromObject(employee.getString("department"));
						String departmentName = departmentJson.getString("name");
						String[] arrayName = departmentName.split(":");
						String name = arrayName[arrayName.length - 1].replace(" ", "");
						List<String> depArray = new ArrayList<>();
						depArray.add(departmentDao.selectIdByName(name));
						JSONObject dingObj = new JSONObject();
						dingObj.put("department", depArray);
						dingObj.put("name", employee.getString("entityid"));
						dingObj.put("mobile", employee.getString("mobilephone").replace(" ", ""));
						System.out.println("往钉钉中添加的人为：" + dingObj);
						// 推送员工数据到钉钉
						String url = "https://oapi.dingtalk.com/user/create?access_token=" + access_token;
						str = DingDingAuth.dingPost(dingObj, url);
					}
				}
			}
		} catch (Exception e) {
			System.out.println("异常");
			//e.printStackTrace();
		}
		return str;
	}
	

	/**
	 * 获取netsuite员工生日,并向下个月过生日的员工发祝福语
	 */
	@Override
	public String getEmployeeBirth() {
		
		Map accountMap = nsService.getAccount();
		
		String result = "";
		String token = Constants.getAccessToken();
		String url = "https://oapi.dingtalk.com/message/send?access_token=" + token;
		try {
			// 从netsuite获取下个月过生日员工信息列表
			result = NetSuiteAuth.getAuth(accountMap, UserUtil.EMPLOYEEBIRTH, null);
			System.out.println("要过生日的人："+result);
			JSONArray jArray = JSONArray.fromObject(result);
			if (jArray.size() > 0) {
				JSONObject jsonEmployee = new JSONObject();
				for (int i = 0; i < jArray.size(); i++) {
					jsonEmployee = JSONObject.fromObject(jArray.get(i));
					JSONObject obj = JSONObject.fromObject(jsonEmployee.get("columns"));
					if (obj.size() > 0 && obj.has("mobilephone")) {
						String mobile = obj.getString("mobilephone").replace(" ", "");
						DingEmpBean userBean = dingUserDao.selectDetailByPhone(mobile);
						System.out.println(userBean);
						String userid = userBean.getUserId();
						if (userid != null) {
							JSONObject cobj = new JSONObject();
							JSONObject content = new JSONObject();
							content.put("content", "生日祝福语3");
							// 一天之内不能向同一个用户发送同一内容
							cobj.put("agentid", 115257477);
							cobj.put("touser", userid);// 一个人时不需要传入数组，但是多人传数组也不行
							cobj.put("msgtype", "text");
							cobj.put("text", content);
							System.out.println("请求结构体：" + cobj);
							String str = DingDingAuth.dingPost(cobj, url);
							System.out.println("推送祝福语后返回结果：" + str);
						}
						String[] id = new String[1];
						id[0] = userid;
						String name = obj.getString("entityid");
						String birth = obj.getString("birthdate");
						String arr[] = birth.split("/");// 分割字符串
						System.out.println(name + "恭喜你，下个月" + arr[1] + "月是你的生日，到时会有神秘大礼哦");
					} else{
						System.out.println("手机号码不存在，请填写手机号码");
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return result;
	}

	/**
	 * 从netsuite获取待审批采购单，保存在本地
	 *  向钉钉发起审批
	 *  发起成功后将返回的审批id保存到待审批订单中
	 */
	@Override
	public String getPurchaseList() {

		Map accountMap = nsService.getAccount();
		
		String result = "";
		String ret = "";
		String access_token = Constants.getAccessToken();
		String process_code = "PROC-0CC33047-C4C8-4A99-9E18-938DC920333B";
		NsApprovePurchaseOrderBean purchaseBean = new NsApprovePurchaseOrderBean();
		try {
			// 1.从netsuite获取待审批订单
			result = NetSuiteAuth.getAuth(accountMap, UserUtil.PURCHASEORDERAPPROVE, null);
			System.out.println("待审批采购订单列表为：" + result);
			JSONArray purchaseArray = JSONArray.fromObject(result);
			if (purchaseArray.size() > 0) {
				JSONObject jsonPurchase = new JSONObject();
				for (int i = 0; i < purchaseArray.size(); i++) {
					System.out.println("第" + (i + 1) + "次订单开始执行");
					jsonPurchase = JSONObject.fromObject(purchaseArray.get(i));
					String nsId = jsonPurchase.getString("id");
					JSONObject approverObject = JSONObject.fromObject(jsonPurchase.get("columns"));
					// 获取到订单后，直接通过id查询审批id，判断是否发起审批
					String instanceId = purchaseDao.selectInstanceId(nsId);
					if (approverObject.size() > 0 && approverObject.has("custbodyapprover")) {
						// 通过id判断是否发送
						if (instanceId == null) {

							// purchaseBean.setTranId(jsonPurchase.getString("id"));
							if (approverObject.has("taxcode")) {
								purchaseBean.setTaxCode(approverObject.getString("taxcode"));
							}
							purchaseBean.setStatusRef(approverObject.getString("statusref"));
							if (approverObject.has("location")) {
								purchaseBean.setLocation(approverObject.getString("location"));
							}
							if (approverObject.has("duedate")) {
								purchaseBean.setDueDate(approverObject.getString("duedate"));
							}
							purchaseBean.setNsId(nsId);
							purchaseBean.setCustBodyApprover(approverObject.getString("custbodyapprover"));
							purchaseBean.setTranId(approverObject.getString("tranid"));
							purchaseBean.setAmount(approverObject.getDouble("amount"));
							purchaseBean.setDisplayName(approverObject.getString("displayname"));
							purchaseBean.setQuantity(approverObject.getInt("quantity"));
							purchaseBean.setRate(approverObject.getDouble("rate"));
							purchaseBean.setEntityId(approverObject.getString("entityid"));
							purchaseBean.setTranDate(approverObject.getString("trandate"));
							// 为什么map赋值之后 approverObject会改变？？？
							// 2.将采购单保存在本地
							purchaseDao.insert(purchaseBean);

							ret = processFormat(nsId, access_token, approverObject, process_code);
							System.out.println(ret);
						} else {
							System.out.println("该订单已发起审批");
						}
					} else {
						System.out.println("获取订单出错或者审批人不存在");
					}
				}
			}
		} catch (IOException e) {
			e.printStackTrace();
		} catch (URISyntaxException e) {
			e.printStackTrace();
		}
		return result;
	}
	/**
	 * 获取到审批订单数据后，解析成审批格式数据，
	 * @auth mark
	 * @param nsId
	 * @param access_token
	 * @param approverObject
	 * @param process_code
	 * @return    
	 * @date 2017年9月1日 上午11:24:13
	 */
	public String processFormat(String nsId, String access_token, JSONObject approverObject, String process_code){
		
		String url = "https://eco.taobao.com/router/rest?method=dingtalk.smartwork.bpms.processinstance.create&v=2.0&format=json&session="
				+ access_token;
		// 获取审批人
		String approverlist = approverIdGet(approverObject);
		//获取申请人id，及所在部门id
		DingEmpBean userBean = new DingEmpBean();
		if(approverObject.has("mobilephone")){
			String mobile = approverObject.getString("mobilephone").replace(" ", "");
			userBean = dingUserDao.selectDetailByPhone(mobile);
		} else {
			return "请输入申请人手机号";
		}
		String userId = userBean.getUserId();
		if(userId == null){
			return "userId不能为空";
		}
		System.out.println("entityid申请人..." + userId);
		//1.ns 部门id通过名称去查询，当出现相同部门时，再根据其上一级部门判断
		//2.钉钉，可以采用发起人所在部门id查部门名称与返回名称是否相同判断
		String deptId = deptIdGet(approverObject);
		System.out.println("申请人所在部门："+deptId);
		
		String amount = JSONObject.fromObject(approverObject).getString("amount");
		String displayname = JSONObject.fromObject(approverObject).getString("displayname");
		System.out.println("displayname..." + displayname);
		JSONObject obj1 = new JSONObject();
		JSONObject obj2 = new JSONObject();
		obj1.put("name", "采购物品");
		obj1.put("value", displayname);
		obj2.put("name", "采购金额");
		obj2.put("value", amount);
		JSONArray array = new JSONArray();
		array.add(obj1);
		array.add(obj2);
		List<NameValuePair> params = new ArrayList<NameValuePair>();
		params.add(new BasicNameValuePair("process_code", process_code));
		params.add(new BasicNameValuePair("originator_user_id", userId));
		params.add(new BasicNameValuePair("dept_id", deptId));
		params.add(new BasicNameValuePair("approvers", approverlist));
		params.add(new BasicNameValuePair("form_component_values", array.toString()));
		// 3.发起审批实例
		System.out.println("-------");
		System.out.println(nsId);
		System.out.println(url);
		System.out.println(params);
		processPost(nsId, url, params);
		
		return "";
	}
	
	/**
	 * 向钉钉发起审批实例,并把返回审批id更新到订单表
	 * @auth mark
	 * @param nsId
	 * @param url
	 * @param params
	 * @return    
	 * @date 2017年9月1日 上午11:15:31
	 */
	public String processPost(String nsId, String url, List<? extends NameValuePair> params){
		// 发起审批实例
		try {
			String str = DingDingAuth.postNoJson(url, params);
			System.out.println("审批结果为："+str);
			JSONObject resultOne = JSONObject.fromObject(str);
			JSONObject resultTwo = JSONObject
					.fromObject(resultOne.get("dingtalk_smartwork_bpms_processinstance_create_response"));
			JSONObject resultThree = JSONObject.fromObject(resultTwo.get("result"));
			// 4.将返回的id写入数据库
			String processId = resultThree.getString("process_instance_id");
			System.out.println(processId + "...." + nsId);
			purchaseDao.updateInstanceId(processId, nsId);
		} catch (IOException | URISyntaxException e) {
			e.printStackTrace();
		}
		return "";
	}
	
	/**
	 * 根据采购单信息获取申请人所在部门id
	 * @auth mark
	 * @param approverObject
	 * @return    
	 * @date 2017年9月5日 下午4:15:13
	 */
	public String deptIdGet(JSONObject approverObject){
		String deptId = "";
		JSONObject deptObject = JSONObject.fromObject(approverObject.getString("department"));
		String deptName = deptObject.getString("name");
		String mobile = approverObject.getString("mobilephone").replace(" ", "");
		NsEmpBean empBean = netSuiteEmpDao.selectEmpByPhone(mobile);
		String departmentName = empBean.getDepartment();
		System.out.println("部门名称"+departmentName);
		String[] arrayName = deptName.split(":");
		String name = arrayName[arrayName.length - 1].replace(" ", "");
		System.out.println("name.."+name);
		int count = departmentDao.deptCount(name);
		if(count == 1){
			deptId = departmentDao.selectIdByName(name);
		}else if(count >1){
			String parentName = arrayName[arrayName.length - 2].replace(" ", "");
			List<DingDepartmentBean> repeatBean= departmentDao.selectByName(name);
			//根据父id查询其名称，与parentName比较，如果相等，则其当前部门id为该部门所要id
			for (DingDepartmentBean reBean : repeatBean) {
				String pName = departmentDao.selectNameById(reBean.getParentId());
				if(pName.equals(parentName)){
					deptId = reBean.getDepartmentId();
				}
			}
		}else{
			return "查找部门出错或不存在该部门";
		}
		return deptId;
	}
	/**
	 * 获取审批人id
	 * @auth mark
	 * @param approverObject
	 * @return    
	 * @date 2017年9月5日 下午4:44:01
	 */
	public String approverIdGet(JSONObject approverObject){
		List<String> approvers = new ArrayList<String>();
		String approverlist = "";
		String approverString = approverObject.getString("custbodyapprover");
		if(approverString.startsWith("{")){//单个
			JSONObject appObject = JSONObject.fromObject(approverString);
			// 通过NS员工id获取手机号码后，查询钉钉员工id，并添加到审批人列表
			String empId = appObject.getString("internalid");
			String mobile = netSuiteEmpDao.selectPhoneById(empId);
			DingEmpBean userBean = dingUserDao.selectDetailByPhone(mobile);
			approverlist = userBean.getUserId();
			System.out.println("审批人id列表1："+approverlist);
		}else if (approverString.startsWith("[")) {
			//多个
			JSONArray approverArray = JSONArray.fromObject(approverObject.getString("custbodyapprover"));
			for (int j = 0; j < approverArray.size(); j++) {
				JSONObject approver = JSONObject.fromObject(approverArray.get(j));
				String empId =approver.getString("internalid");
				String mobile = netSuiteEmpDao.selectPhoneById(empId);
				DingEmpBean userBean = dingUserDao.selectDetailByPhone(mobile);
				String uId = dingUserDao.selIdByPhone(mobile);
				if(uId == null){
					return "查找不到待审人id，无法发起审批";
				}
				String userId = userBean.getUserId();
				System.out.println("userid"+userId);
				approvers.add(uId);
				approverlist = StringUtils.collectionToDelimitedString(approvers, ",");
			}
			System.out.println("审批人id列表2："+approverlist);
		} else {
			return "审批人不存在！";
		}
		return approverlist;
	}
}
