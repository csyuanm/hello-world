<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.zing.dingding.dao.DingEmployeeDao" >
  <resultMap id="BaseResultMap" type="com.zing.dingding.model.DingEmployeeBean" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="user_id" property="userId" jdbcType="VARCHAR" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="mobile" property="mobile" jdbcType="VARCHAR" />
    <result column="department" property="department" jdbcType="VARCHAR" />
    <result column="email" property="email" jdbcType="VARCHAR" />
    <result column="position" property="position" jdbcType="VARCHAR" />
    <result column="job_number" property="jobNumber" jdbcType="VARCHAR" />
    <result column="flag" property="flag" jdbcType="BIT" />
    <result column="last_update_time" property="lastUpdateTime" jdbcType="TIMESTAMP" />
  </resultMap>
  
  <!-- 根据员工id获取员工信息 -->
  <select id="getDingUser" parameterType="String" resultMap="BaseResultMap">
  select * from ding_employee where user_id = #{userId}
  </select> 
  
  <!-- 通过手机号码获取个人信息 -->
  <select id="selectDetailByPhone" parameterType="java.lang.String" resultMap="BaseResultMap">
  select * from ding_employee where mobile = #{mobile}
  </select>
  
  <!-- 根据手机查询是否存在钉钉 -->
  <select id="countByMobile" parameterType="String" resultType="Integer">
  select count(*) from ding_employee where mobile = #{mobile}
  </select>
  
  <select id="selectIdByPhone" parameterType="java.lang.String" resultType="java.lang.String">
  	select user_id from ding_employee where mobile = #{mobile}
  </select>
  
  <insert id="insert" parameterType="com.zing.dingding.model.DingEmployeeBean" >
    insert into ding_employee (id, user_id, name, 
      mobile, department, email, 
      position, job_number, flag, 
      last_update_time)
    values (#{id,jdbcType=INTEGER}, #{userId,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, 
      #{mobile,jdbcType=VARCHAR}, #{department,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, 
      #{position,jdbcType=VARCHAR}, #{jobNumber,jdbcType=VARCHAR}, 1, 
      now())
      on duplicate key update name = #{name}
  </insert>
  
  
</mapper>